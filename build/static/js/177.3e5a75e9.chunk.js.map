{"version":3,"file":"static/js/177.3e5a75e9.chunk.js","mappings":"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","sources":["page/ResetPassword.js"],"sourcesContent":["import { Layout } from \"../components/Layout\";\nimport styled from \"styled-components\";\nimport Box from \"@mui/material/Box\";\nimport { Formik } from \"formik\";\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/button\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { OPERATION_SAVE_PLACE_API } from \"../config/config\";\nimport { useState } from \"react\";\nimport Loader from \"../components/loader\";\n\nconst Contain = styled(Box)({\n  backgroundImage: `url(${\"./image/Rectangle.png\"})`,\n  width: \"100%\",\n  height: \"100%\",\n  backgroundRepeat: \"no-repeat\",\n  backgroundSize: \"cover\",\n  zIndex: -1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n});\n\nconst Form = styled.form({\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  flexDirection: \"column\",\n  marginTop: \"10rem\",\n  zIndex: 1000,\n});\n\nconst TextForgot = styled(\"p\")({\n  color: \"#FFFFFF\",\n  textAlign: \"center\",\n  fontFamily: \"Genesis\",\n  fontSize: 10,\n  fontWeight: 400,\n  cursor: \"pointer\",\n});\n\nconst ResetPassword = () => {\n  const [searchParams] = useSearchParams();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSavePassword = async (values, { setSubmitting, setErrors }) => {\n    setLoading(true);\n    const token = searchParams.get(\"token\");\n    const isUpdatePassword = await fetch(\n      `${OPERATION_SAVE_PLACE_API}/auth/recovery-password`,\n      {\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"X-FP-API-KEY\": \"iphone\", //it can be iPhone or your any other attribute\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          newPassword: values.password,\n        }),\n      }\n    );\n    const resutl = await isUpdatePassword.json();\n    setErrors({ verifyPassword: resutl.message });\n    setSubmitting(false);\n    setLoading(false);\n  };\n\n  const validateVerifyPassword = ({ password, verifyPassword }) => {\n    const errors = {};\n    if (!/^(?=.{8,})/g.test(verifyPassword)) {\n      errors.verifyPassword = \"Password must be 8 characters\";\n    }\n    if (password !== verifyPassword) {\n      errors.verifyPassword = \"Password does not match \";\n    }\n    return errors;\n  };\n\n  const validatePassword = ({ password }) => {\n    const errors = {};\n    if (!/^.*[.!@#\\$%\\^&\\*]/g.test(password)) {\n      errors.password =\n        \"The string must contain at least one special character\";\n    }\n    if (!/^.*[0-9]/g.test(password)) {\n      errors.password = \"The string must contain at least 1 numeric\";\n    }\n    if (!/^.*[a-z]/g.test(password)) {\n      errors.password = \"The string must contain at least 1 lowercase\";\n    }\n    if (!/^.*[A-Z]/g.test(password)) {\n      errors.password = \"The string must contain at least 1 uppercase\";\n    }\n    if (!/^.{8,}/g.test(password)) {\n      errors.password = \"Password must be 8 characters\";\n    }\n    return errors;\n  };\n\n  return (\n    <Layout>\n      <Contain>\n        <Formik\n          initialValues={{\n            password: \"\",\n            verifyPassword: \"\",\n          }}\n          validate={(values) => {\n            const password = validatePassword(values);\n            if (password.password) return password;\n            const passwordValidation = validateVerifyPassword(values);\n            if (passwordValidation.verifyPassword) return passwordValidation;\n          }}\n          onSubmit={handleSavePassword}\n        >\n          {({\n            values,\n            handleChange,\n            handleSubmit,\n            handleBlur,\n            isSubmitting,\n            errors,\n            touched,\n          }) => {\n            return (\n              <Form onSubmit={handleSubmit}>\n                <TextInput\n                  title={\"Password\"}\n                  type={\"password\"}\n                  name={\"password\"}\n                  text={values.password}\n                  handleBlur={handleBlur}\n                  setText={handleChange}\n                />\n                {errors.password && touched.password && (\n                  <TextForgot>{errors.password}</TextForgot>\n                )}\n                <TextInput\n                  title={\"Confirm Password\"}\n                  type={\"password\"}\n                  name={\"verifyPassword\"}\n                  text={values.verifyPassword}\n                  handleBlur={handleBlur}\n                  setText={handleChange}\n                />\n                {errors.verifyPassword && touched.verifyPassword && (\n                  <TextForgot>{errors.verifyPassword}</TextForgot>\n                )}\n                <Button text={\"Save\"} type=\"submit\" disabled={isSubmitting} />\n                <Loader isVisible={loading} />\n              </Form>\n            );\n          }}\n        </Formik>\n      </Contain>\n    </Layout>\n  );\n};\n\nexport default ResetPassword;\n"],"names":["Contain","styled","Box","backgroundImage","width","height","backgroundRepeat","backgroundSize","zIndex","display","flexDirection","alignItems","Form","justifyContent","marginTop","TextForgot","color","textAlign","fontFamily","fontSize","fontWeight","cursor","useSearchParams","searchParams","useState","loading","setLoading","handleSavePassword","values","setSubmitting","setErrors","token","get","fetch","OPERATION_SAVE_PLACE_API","withCredentials","headers","Authorization","method","body","JSON","stringify","newPassword","password","isUpdatePassword","json","resutl","verifyPassword","message","initialValues","validate","errors","test","validatePassword","passwordValidation","validateVerifyPassword","onSubmit","handleChange","handleSubmit","handleBlur","isSubmitting","touched","title","type","name","text","setText","disabled","isVisible"],"sourceRoot":""}